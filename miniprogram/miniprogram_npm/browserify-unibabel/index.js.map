{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nfunction utf8ToBinaryString(str) {\n  var escstr = encodeURIComponent(str);\n  // replaces any uri escape sequence, such as %0A,\n  // with binary escape, such as 0x0A\n  var binstr = escstr.replace(/%([0-9A-F]{2})/g, function(match, p1) {\n    return String.fromCharCode(parseInt(p1, 16));\n  });\n\n  return binstr;\n}\n\nfunction utf8ToBuffer(str) {\n  var binstr = utf8ToBinaryString(str);\n  var buf = binaryStringToBuffer(binstr);\n  return buf;\n}\n\nfunction utf8ToBase64(str) {\n  var binstr = utf8ToBinaryString(str);\n  return btoa(binstr);\n}\n\nfunction binaryStringToUtf8(binstr) {\n  var escstr = binstr.replace(/(.)/g, function (m, p) {\n    var code = p.charCodeAt(0).toString(16).toUpperCase();\n    if (code.length < 2) {\n      code = '0' + code;\n    }\n    return '%' + code;\n  });\n\n  return decodeURIComponent(escstr);\n}\n\nfunction bufferToUtf8(buf) {\n  var binstr = bufferToBinaryString(buf);\n\n  return binaryStringToUtf8(binstr);\n}\n\nfunction base64ToUtf8(b64) {\n  var binstr = atob(b64);\n\n  return binaryStringToUtf8(binstr);\n}\n\nfunction bufferToBinaryString(buf) {\n  var binstr = Array.prototype.map.call(buf, function (ch) {\n    return String.fromCharCode(ch);\n  }).join('');\n\n  return binstr;\n}\n\nfunction bufferToBase64(arr) {\n  var binstr = bufferToBinaryString(arr);\n  return btoa(binstr);\n}\n\nfunction binaryStringToBuffer(binstr) {\n  var buf;\n\n  if ('undefined' !== typeof Uint8Array) {\n    buf = new Uint8Array(binstr.length);\n  } else {\n    buf = [];\n  }\n\n  Array.prototype.forEach.call(binstr, function (ch, i) {\n    buf[i] = ch.charCodeAt(0);\n  });\n\n  return buf;\n}\n\nfunction base64ToBuffer(base64) {\n  var binstr = atob(base64);\n  var buf = binaryStringToBuffer(binstr);\n  return buf;\n}\n\nmodule.exports = {\n  utf8ToBinaryString: utf8ToBinaryString\n, utf8ToBuffer: utf8ToBuffer\n, utf8ToBase64: utf8ToBase64\n, binaryStringToUtf8: binaryStringToUtf8\n, bufferToUtf8: bufferToUtf8\n, base64ToUtf8: base64ToUtf8\n, bufferToBinaryString: bufferToBinaryString\n, bufferToBase64: bufferToBase64\n, binaryStringToBuffer: binaryStringToBuffer\n, base64ToBuffer: base64ToBuffer\n\n// compat\n, strToUtf8Arr: utf8ToBuffer\n, utf8ArrToStr: bufferToUtf8\n, arrToBase64: bufferToBase64\n, base64ToArr: base64ToBuffer\n};\n"]}